/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';
import {
  ActionIconSize,
  ActionIconVariant,
} from './components/wf-action-icon/types';
import {
  GroupItemDTO,
} from './components/wf-action-menu/types';
import {
  FlyoutCloseEvent,
  FlyoutEvent,
  FlyoutOpenEvent,
  FlyoutPlacement,
} from './components/wf-flyout/types';
import {
  InputSize,
  InputTextAlign,
  InputType,
  InputVariant,
  MaskOptions,
  MaskValue,
  StepperOption,
} from './components/wf-input/types';
import {
  ButtonSize,
  ButtonType,
  ButtonVariant,
} from './components/wf-button/types';
import {
  FormErrorMessage,
  IconPlacement,
} from './utils/types';
import {
  AmountFilterOutput,
  AmountFilterRange,
} from './components/wf-amount-filter/types';
import {
  IconSize,
  IconType,
} from './components/wf-icon/types';
import {
  CalendarWeekend,
  PresetNameType,
} from './components/wf-calendar-picker/types';
import {
  CheckboxOutput,
  CheckboxSize,
} from './components/wf-checkbox/types';
import {
  Alignment,
  CustomRangeSelectionChangedEvent,
  GridLayoutType,
  HeadersDisplay,
  RowDataType,
  StatusBarType,
  StyleType,
  TableColumns,
  TableIcons,
} from './components/wf-table/types';
import {
  DrawerPosition,
  DrawerWidth,
} from './components/wf-drawer/types';
import {
  ExpansionPanelEventData,
} from './components/wf-accordion/types';
import {
  MultiselectDropdownOption,
  MultiselectDropdownResult,
} from './components/wf-multiselect-dropdown/types';
import {
  ProcessNavigationStep,
  ProcessNavigationType,
} from './components/wf-process-navigation/types';
import {
  RadioOption,
  RadioSize,
} from './components/wf-radio/types';
import {
  ScrollType,
} from './components/wf-scrollbar/types';
import {
  SelectOption,
  SelectSize,
  SelectType,
  SelectVariant,
} from './components/wf-select/types';
import {
  SwitchPlacement,
  SwitchSize,
} from './components/wf-switch/types';
import {
  TabsType,
} from './components/wf-tabs/types';
import {
  CellClickedEvent,
  ColumnMovedEvent,
  FilterChangedEvent,
  GridOptions,
  IServerSideDatasource,
  PaginationChangedEvent,
  RowClickedEvent,
  RowSelectedEvent,
  SelectionChangedEvent,
  SortChangedEvent,
} from 'ag-grid-community';
import {
  TagType,
} from './components/wf-tag/types';
import {
  TextareaSize,
  TextareaVariant,
} from './components/wf-textarea/types';
import {
  TooltipEvent,
  TooltipPlacement,
  TooltipType,
  TooltipWidth,
} from './components/wf-tooltip/types';

export namespace Components {
  interface WfAccordion {}
  interface WfActionIcon {
    /**
    * Defines if icon has bounding circle
    */
    'bounding': boolean;
    /**
    * The name of the icon
    */
    'name': string;
    /**
    * Defines if icon has property open
    */
    'open': boolean;
    /**
    * Decide if icon can change the size
    */
    'scalable': boolean;
    /**
    * The size of the icon
    */
    'size': ActionIconSize;
    /**
    * The variant of the icon
    */
    'variant': ActionIconVariant;
  }
  interface WfActionMenu {
    /**
    * Child menu trigger event
    */
    'childTrigger': FlyoutEvent;
    /**
    * Label of extra items button
    */
    'extraItemsLabel': string;
    /**
    * Strucutre of menu items
    */
    'items': GroupItemDTO[] | string;
    /**
    * Limit of items to show in primary dropdown
    */
    'itemsLimit': number;
    /**
    * Configure the arrow pointer for the child level menu flyout
    */
    'noArrow': boolean;
    /**
    * Define if action menu is opened or closed
    */
    'opened': boolean;
    /**
    * Configure child level flyout menu overlap
    */
    'overlap': number;
    /**
    * Placement of action menu, if not defined it will be auto-calculated
    */
    'placement': FlyoutPlacement;
    /**
    * Placement of sub menus, if not defined it will be auto-calculated
    */
    'subPlacement': 'left' | 'right';
    /**
    * Trigger event
    */
    'trigger': FlyoutEvent;
  }
  interface WfAmountFilter {
    /**
    * Size of action buttons
    */
    'buttonSize': ButtonSize;
    /**
    * Decides if amount filter is disabled
    */
    'disabled': boolean;
    /**
    * Sets filter component error state
    */
    'error': boolean;
    /**
    * Error message for empty input value (inner input)
    */
    'errorMessage': FormErrorMessage;
    /**
    * Filtered column key name. Used as ID of filtered column
    */
    'field': string;
    /**
    * Inner value input label
    */
    'innerLabel': string;
    /**
    * DEPRECATED! Size of filter input field
    */
    'inputSize': InputSize;
    /**
    * Type of internal input
    */
    'inputType': InputType;
    /**
    * Filter label
    */
    'label': string;
    /**
    * Component error state message
    */
    'mainErrorMessage': FormErrorMessage;
    /**
    * Mask options
    */
    'maskOptions': MaskOptions;
    /**
    * Value type returned from masked type input
    */
    'maskValue': MaskValue;
    /**
    * Input text placeholder
    */
    'placeholder': string;
    /**
    * Internal input prefix
    */
    'prefixLabel': string;
    /**
    * Decides if amount filter required
    */
    'required': boolean;
    /**
    * Current selected tab
    */
    'selectedTab': AmountFilterRange;
    /**
    * Size of component trigger
    */
    'size': InputSize;
    /**
    * Input value alignment
    */
    'textAlign': InputTextAlign;
    /**
    * Inner input current value
    */
    'value': number | string;
    /**
    * Variant of filter wf-input
    */
    'variant': InputVariant;
  }
  interface WfButton {
    /**
    * Use to set button state as active
    */
    'active': boolean;
    /**
    * Use to set button state as disabled
    */
    'disabled': boolean;
    /**
    * Icon name to display on button
    */
    'icon': string;
    /**
    * Define if icon should be shown before or after text
    */
    'iconPlacement': IconPlacement;
    /**
    * Icon size
    */
    'iconSize': IconSize;
    /**
    * DEPRECATED! Icon type
    */
    'iconType': IconType;
    /**
    * Button focus method
    */
    'setFocus': () => Promise<void>;
    /**
    * DEPRECATED! Size of button
    */
    'size': ButtonSize;
    /**
    * Type of button
    */
    'type': ButtonType;
    /**
    * Variant of button. DEPRECATED! 'link', 'success', 'warning', 'info', 'danger'
    */
    'variant': ButtonVariant;
  }
  interface WfCalendarPicker {
    /**
    * DEPRECATED! Size of action buttons
    */
    'buttonSize': ButtonSize;
    /**
    * Initial calendar date
    */
    'date': string[] | string;
    /**
    * Default preset
    */
    'defaultPreset': PresetNameType;
    /**
    * Decides if calendar picker is disabled
    */
    'disabled': boolean;
    /**
    * Sets filter component error state
    */
    'error': boolean;
    /**
    * Define array of hided preset
    */
    'excludedPreset': any[];
    /**
    * Define the date format
    */
    'format': string;
    /**
    * Define blackout days
    */
    'holidays': (string | string[])[];
    /**
    * Input icon
    */
    'icon': string;
    /**
    * Input icon size
    */
    'iconSize': IconSize;
    /**
    * DEPRECATED! Size of filter input fields
    */
    'inputSize': InputSize;
    /**
    * Content of input top label
    */
    'label': string;
    /**
    * Component error state message
    */
    'mainErrorMessage': FormErrorMessage;
    /**
    * Define the max date available for selection
    */
    'maxDate': string | Date;
    /**
    * Define the min date available for selection
    */
    'minDate': string | Date;
    /**
    * Input text placeholder
    */
    'placeholder': string;
    /**
    * Enable range picking
    */
    'range': boolean;
    /**
    * Decides if calendar field required
    */
    'required': boolean;
    /**
    * To focus calendar element use setFocus method
    */
    'setFocus': () => Promise<void>;
    /**
    * Decides if disabled data should be shown
    */
    'showDisable': boolean;
    /**
    * Define if the left panel with preset is visible
    */
    'showPreset': boolean;
    /**
    * DEPRECATED! Size of component trigger
    */
    'size': InputSize;
    /**
    * Type of weekend to block in calendar
    */
    'weekend': CalendarWeekend;
  }
  interface WfCard {}
  interface WfCardBody {}
  interface WfCardFooter {}
  interface WfCardHeader {}
  interface WfCardHeaderActions {}
  interface WfCardTitle {}
  interface WfCheckbox {
    /**
    * Checkbox ID
    */
    'checkboxId': string;
    /**
    * Decides if checkbox is checked
    */
    'checked': boolean;
    /**
    * Decides if checkbox is disabled
    */
    'disabled': boolean;
    /**
    * Decides if checkbox has an error
    */
    'error': boolean;
    /**
    * Error messages
    */
    'errorMessage': FormErrorMessage;
    /**
    * Decides if checkbox is indeterminate mode
    */
    'indeterminate': boolean;
    /**
    * Content of label
    */
    'label': string;
    /**
    * Checkbox name
    */
    'name': string;
    /**
    * Decides if checkbox field required
    */
    'required': boolean;
    /**
    * To focus checkbox element use setFocus method
    */
    'setFocus': () => Promise<void>;
    /**
    * Size of checkbox
    */
    'size': CheckboxSize;
    /**
    * Value of checkbox
    */
    'value': string;
  }
  interface WfChip {
    'removeChip': () => Promise<void>;
  }
  interface WfChipList {}
  interface WfColumnsCustomizer {
    /**
    * Size of action buttons
    */
    'buttonSize': ButtonSize;
    /**
    * Columns definition object. Should be created from wf-table columns definition.
    */
    'defaultColumns': TableColumns[] | string;
    /**
    * Header text
    */
    'header': string;
    /**
    * Dragging icon name
    */
    'icon': string;
    /**
    * Dragging icon size
    */
    'iconSize': IconSize;
    /**
    * Limit of search/jump to list items
    */
    'maxSearchItems': number;
    /**
    * Define if customizer drawer is opened
    */
    'opened': boolean;
    /**
    * Search/jump to input icon name
    */
    'searchInputIcon': string;
    /**
    * Search/jump to input icon size
    */
    'searchInputIconSize': IconSize;
    /**
    * Search/jump to input label
    */
    'searchInputLabel': string;
    /**
    * Search/jump to input placeholder
    */
    'searchInputPlaceholder': string;
    /**
    * Search/jump to input size
    */
    'searchInputSize': InputSize;
  }
  interface WfDrawer {
    /**
    * Animation duration
    */
    'animationDuration': number;
    /**
    * Control back button
    */
    'backButton': boolean;
    /**
    * Back action icon name
    */
    'backIcon': string;
    'close': () => Promise<void>;
    /**
    * Closing action icon name
    */
    'closeIcon': string;
    /**
    * Simple drawer title
    */
    'header': string;
    /**
    * Backdrop drawer
    */
    'hideBackdrop': boolean;
    /**
    * The size of the close and back icon
    */
    'iconSize': ActionIconSize;
    /**
    * Controls the 'opened' state of the drawer
    */
    'opened': boolean;
    /**
    * Position of drawer
    */
    'position': DrawerPosition;
    /**
    * Preset drawer
    */
    'preset': string;
    /**
    * Control should drawer squeeze page
    */
    'squeezePage': boolean;
    /**
    * Min witdth of page where squeeze is available
    */
    'thresholdBreakpoint': number;
    /**
    * Controls the 'width' of drawer dialog. Can be standard (default), slim or wide
    */
    'width': DrawerWidth;
  }
  interface WfDropdown {
    /**
    * Define should we adjust height *
    */
    'adjustHeight': boolean;
    /**
    * Define if dropdown aling with parent *
    */
    'alignWithParent': boolean;
    /**
    * Define if dropdown available to open *
    */
    'disabled': boolean;
    'opened': boolean;
    /**
    * Define for special case parent selector *
    */
    'parentSelector': string;
    /**
    * Define if closing on scroll active *
    */
    'scrollSensitive': boolean;
  }
  interface WfExpansionPanel {
    /**
    * State of panel
    */
    'expanded': boolean;
    /**
    * Unique Id of panel
    */
    'panelId': string;
    /**
    * Show title on open style
    */
    'pinnedTitle': boolean;
  }
  interface WfFlyout {
    /**
    * DEPRECATED! Define if flyout should have visual pointer to trigger element
    */
    'arrowPointer': boolean;
    /**
    * Whether it should be moved directly to the body
    */
    'detached': boolean;
    'enableOpenChangedEvent': boolean;
    /**
    * Focusable element attribute. Should be added to design component that content should be focusable.
    */
    'focusAttribute': string;
    /**
    * Current depth level
    */
    'level': number;
    /**
    * Define if flyout should have visual pointer to trigger element
    */
    'noArrow': boolean;
    /**
    * Define if flyout content is open or close
    */
    'opened': boolean;
    /**
    * Configure child level flyout menu overlap
    */
    'overlap': number;
    /**
    * Placement of flyout, if not defined it will be auto-calculated
    */
    'placement': FlyoutPlacement;
    /**
    * Trigger event
    */
    'trigger': FlyoutEvent;
    /**
    * Tab index assigned to the trigger element
    */
    'triggerTabIndex': string;
  }
  interface WfIcon {
    /**
    * The name of the icon
    */
    'name': string;
    /**
    * Decide if icon can change the size
    */
    'scalable': boolean;
    /**
    * The size of the icon
    */
    'size': IconSize;
    /**
    * DEPRECATED! The type of the icon
    */
    'type': IconType;
  }
  interface WfInput {
    /**
    * DEPRECATED Content of caption
    */
    'caption': string;
    /**
    * Content of description / contextual info
    */
    'description': string;
    /**
    * Decides if input is disabled
    */
    'disabled': boolean;
    /**
    * Decides if input has an error
    */
    'error': boolean;
    /**
    * Error messages
    */
    'errorMessage': FormErrorMessage;
    /**
    * Input icon
    */
    'icon': string;
    /**
    * Input icon size
    */
    'iconSize': IconSize;
    /**
    * Decides if label has inline position
    */
    'inlineLabel': boolean;
    /**
    * ID of an underlying input element
    */
    'inputId': string;
    /**
    * Content of top label
    */
    'label': string;
    /**
    * Decides if input in locked state
    */
    'locked': boolean;
    /**
    * Input locked icon
    */
    'lockedIcon': string;
    /**
    * Input locked icon size
    */
    'lockedIconSize': IconSize;
    /**
    * Mask options
    */
    'maskOptions': MaskOptions;
    /**
    * Value type returned from masked type input
    */
    'maskValue': MaskValue;
    /**
    * Maximum length of input field
    */
    'maxlength': number;
    /**
    * Input text placeholder
    */
    'placeholder': string;
    /**
    * Input prefix
    */
    'prefixLabel': string;
    /**
    * Decides if input is in readonly mode
    */
    'readonly': boolean;
    /**
    * Decides if input field required
    */
    'required': boolean;
    /**
    * Input select method
    */
    'selectText': () => Promise<void>;
    /**
    * Input focus method
    */
    'setFocus': () => Promise<void>;
    /**
    * DEPRECATED Size of input
    */
    'size': InputSize;
    /**
    * Input value alignment
    */
    'textAlign': InputTextAlign;
    /**
    * Type of input
    */
    'type': InputType;
    /**
    * Value of input
    */
    'value': string;
    /**
    * Variant of input
    */
    'variant': InputVariant;
  }
  interface WfModal {
    /**
    * Size of action buttons
    */
    'buttonSize': ButtonSize;
    /**
    * Header text
    */
    'header': string;
    /**
    * Controls the 'opened' state of the modal
    */
    'opened': boolean;
  }
  interface WfMultiselectDropdown {
    /**
    * DEPRECATED! Size of action buttons
    */
    'buttonSize': ButtonSize;
    /**
    * Size of items checkboxs
    */
    'checkboxSize': CheckboxSize;
    /**
    * Decides if multiselect dropdown is disabled
    */
    'disabled': boolean;
    /**
    * Sets filter component error state
    */
    'error': boolean;
    /**
    * Component error state message
    */
    'errorMessage': FormErrorMessage;
    /**
    * Filtered column key name. Used as ID of filtered column
    */
    'field': string;
    /**
    * Multiselect dropdown label
    */
    'label': string;
    /**
    * Multiselect dropdown options. Type string is DEPRECATED!
    */
    'options': MultiselectDropdownOption[] | string;
    /**
    * Limit of visible selected options
    */
    'optionsVisibilityLimit': number | string;
    /**
    * Input text placeholder
    */
    'placeholder': string;
    /**
    * Decides if multiselect required
    */
    'required': boolean;
    /**
    * DEPRECATED! Size of component trigger
    */
    'size': InputSize;
    /**
    * Property gives current value or sets new from options value.
    */
    'value': string[];
    /**
    * Variant of filter wf-input
    */
    'variant': InputVariant;
  }
  interface WfProcessNavigation {
    /**
    * Array of process steps
    */
    'steps': ProcessNavigationStep[] | string;
    /**
    * Navigation type, freeflow allows step clicking
    */
    'type': ProcessNavigationType;
  }
  interface WfRadio {
    /**
    * Decides if radio group is disabled
    */
    'disabled': boolean;
    /**
    * Decides if radio group has an error
    */
    'error': boolean;
    /**
    * Error messages
    */
    'errorMessage': FormErrorMessage;
    /**
    * Decides if radio group align horizontally
    */
    'inline': boolean;
    /**
    * Content of top label
    */
    'label': string;
    /**
    * Radio buttons group name
    */
    'name': string;
    /**
    * Radio options
    */
    'options': RadioOption<any>[];
    /**
    * Decides if radio field required
    */
    'required': boolean;
    /**
    * To focus radio button element use setFocus method
    */
    'setFocus': () => Promise<void>;
    /**
    * Size of radio
    */
    'size': RadioSize;
    /**
    * Currently selected value
    */
    'value': any;
  }
  interface WfRadioOption {
    /**
    * Decides if option is initially selected
    */
    'checked': boolean;
    /**
    * Decides if option is disabled
    */
    'disabled': boolean;
    /**
    * Option label
    */
    'label': string;
    /**
    * Option ID
    */
    'optionId': string;
    /**
    * Option value
    */
    'value': any;
  }
  interface WfReorder {
    /**
    * Table columns definition array
    */
    'columns': TableColumns[] | string;
    /**
    * Array of data
    */
    'data': any[] | string;
    'getOrder': () => Promise<any>;
    /**
    * Dragging icon name
    */
    'icon': string;
    /**
    * Dragging icon size
    */
    'iconSize': IconSize;
    'resetToDefault': () => Promise<void>;
  }
  interface WfScrollbar {
    /**
    * Define attribute name that will be added to scroll parent.
    */
    'parentAttr': string;
    /**
    * Define static height of scrolling content. If set, content height won't be recalculated.
    */
    'staticHeight': string;
    /**
    * Define scrollbar type.
    */
    'type': ScrollType;
  }
  interface WfSelect {
    /**
    * DEPRECATED! Content of left caption
    */
    'caption': string;
    /**
    * Custom row for option element
    */
    'customRow': (option: SelectOption<any>) => string;
    /**
    * Content of description / contextual info
    */
    'description': string;
    /**
    * Decides if select is disabled
    */
    'disabled': boolean;
    /**
    * Decides if select has an error
    */
    'error': boolean;
    /**
    * Error messages
    */
    'errorMessage': FormErrorMessage;
    /**
    * Icon name
    */
    'icon': string;
    /**
    * Icon size
    */
    'iconSize': IconSize;
    /**
    * Decides if label has inline position
    */
    'inlineLabel': boolean;
    /**
    * Content of top label
    */
    'label': string;
    /**
    * Decides if filtering available
    */
    'liveSearch': boolean;
    /**
    * Decides if select is in locked state
    */
    'locked': boolean;
    /**
    * Select options. Type string is DEPRECATED!
    */
    'options': SelectOption<any>[] | string;
    /**
    * Placeholder describes the expected value
    */
    'placeholder': string;
    /**
    * Prefix label content
    */
    'prefixLabel': string;
    /**
    * Decides if select field required
    */
    'required': boolean;
    /**
    * DEPRECATED! Search Icon Name
    */
    'searchIcon': string;
    /**
    * Select ID
    */
    'selectId': string;
    /**
    * Type of component user as select list trigger (TEMPORARY! Will be changed to 'type')
    */
    'selectType': SelectType;
    /**
    * To focus select element use setFocus method
    */
    'setFocus': () => Promise<void>;
    /**
    * DEPRECATED! Size of select
    */
    'size': SelectSize;
    /**
    * DEPRECATED! Type of select
    */
    'type': SelectVariant;
    /**
    * Property gives current value or sets new from options value.
    */
    'value': any;
    /**
    * Variant of select trigger (SelectVariant or ButtonVariant, based on selectType)
    */
    'variant': SelectVariant | ButtonVariant;
  }
  interface WfSelectOption {
    /**
    * Decides if option is disabled
    */
    'disabled': boolean;
    /**
    * Option name
    */
    'name': string;
    /**
    * Decides if option is selected
    */
    'selected': boolean;
    /**
    * Option display name when it is selected
    */
    'selectedName': string;
    /**
    * Option value
    */
    'value': any;
  }
  interface WfSpinner {
    /**
    * Delay time (in ms) after which spinner will show
    */
    'delay': number;
    /**
    * Amount of time (in ms) that spinner will wait until shows timeoutErrorMsg. Set to 0 to disable.
    */
    'errorTimeout': number;
    /**
    * Define if spinner is visible
    */
    'opened': boolean;
    /**
    * Message to show error when time expired
    */
    'timeoutErrorMsg': string;
    /**
    * Message to show warning with long loading time
    */
    'timeoutWarningMsg': string;
    /**
    * Amount of time (in ms) that spinner will wait until shows timeoutWarningMsg. Set to 0 to disable.
    */
    'warningTimeout': number;
  }
  interface WfSpy {
    /**
    * HTML element to track
    */
    'target': HTMLElement;
  }
  interface WfStepperInput {
    'arrowDownIcon': string;
    'arrowIconSize': ActionIconSize;
    'arrowUpIcon': string;
    /**
    * DEPRECATED Content of caption
    */
    'caption': string;
    /**
    * Content of description / contextual info
    */
    'description': string;
    /**
    * Decides if stepper is disabled
    */
    'disabled': boolean;
    /**
    * Decides if stepper has an error
    */
    'error': boolean;
    /**
    * Error messages
    */
    'errorMessage': FormErrorMessage;
    /**
    * DEPRECATED! Accumulator function to get Value from object option
    */
    'getValue': Function;
    /**
    * Decides if label has inline position
    */
    'inlineLabel': boolean;
    /**
    * Id of input stepper
    */
    'inputId': string;
    /**
    * Content of top label
    */
    'label': string;
    /**
    * Decides if stepper is in locked state
    */
    'locked': boolean;
    /**
    * Input locked icon
    */
    'lockedIcon': string;
    /**
    * Input locked icon size
    */
    'lockedIconSize': IconSize;
    /**
    * DEPRECATED! Decides if stepper input numeric
    */
    'numeric': boolean;
    /**
    * Stepper options. DEPRECATED! Option types StepperOption[] | string
    */
    'options': string[] | StepperOption[] | string;
    /**
    * DEPRECATED Size of stepper
    */
    'size': InputSize;
    /**
    * Input value alignment
    */
    'textAlign': InputTextAlign;
    /**
    * Initial numeric input value or gives/sets value from options value.
    */
    'value': string | number;
    /**
    * Variant of stepper
    */
    'variant': InputVariant;
  }
  interface WfSwitch {
    /**
    * Define if switch checked
    */
    'checked': boolean;
    /**
    * Disabled Switch
    */
    'disabled': boolean;
    /**
    * Error Switch
    */
    'error': boolean;
    /**
    * Define icon
    */
    'icon': string;
    /**
    * Define if icon should be shown before or after text
    */
    'iconPlacement': IconPlacement;
    /**
    * Define icon size
    */
    'iconSize': IconSize;
    /**
    * DEPRECATED! Define icon
    */
    'iconname': any;
    /**
    * DEPRECATED! Define icon size
    */
    'iconsize': IconSize;
    /**
    * Define switch label
    */
    'label': string;
    /**
    * Define switch off name
    */
    'off': string;
    /**
    * Define switch on name
    */
    'on': string;
    /**
    * On/Off labels placement
    */
    'placement': SwitchPlacement;
    /**
    * Readonly Switch
    */
    'readonly': boolean;
    /**
    * On/Off labels placement
    */
    'size': SwitchSize;
  }
  interface WfTabButton {
    /**
    * Controls the 'disabled' state of the button
    */
    'disabled': boolean;
    /**
    * Decides which tab is selected initially, do not set this property directly since it's propagated from `wf-tabs`
    */
    'selected': boolean;
    /**
    * This prop needs to be reflected due to a weird behavior of Stencil in Stencil components
    */
    'tab': string;
    /**
    * Controls the visual 'type' of tabs, do not set this property directly since it's propagated from `wf-tabs`
    */
    'type': TabsType;
  }
  interface WfTable {
    /**
    * Define if data actions (such as sorting) should be animated
    */
    'animateRows'?: boolean;
    /**
    * Define if columns width should be auto resize after load, to fit cells content. This option will ignore width declaration in columns definition. Can not work with sizeColumnsToFitFlag.
    */
    'autoSizeColumnsFlag'?: boolean;
    /**
    * Table columns definition array
    */
    'columns': TableColumns[] | string;
    /**
    * Define custom configuration of the table
    */
    'configuration'?: GridOptions | string;
    /**
    * Client side data
    */
    'data'?: RowDataType;
    /**
    * Server side data datasource object
    */
    'datasource'?: IServerSideDatasource | string;
    /**
    * Define table layout
    */
    'domLayout'?: GridLayoutType;
    /**
    * Define if cells range selection is enabled
    */
    'enableRangeSelection'?: boolean;
    /**
    * Define if groups should be expanded on load
    */
    'expanded'?: boolean;
    /**
    * Table exports data to an excel file by the method
    */
    'exportToExcel': () => Promise<void>;
    /**
    * Define if data filter is enable
    */
    'filter'?: boolean;
    /**
    * Define header row height
    */
    'headerHeight'?: number;
    /**
    * Define column headers text overflow. Can be displayed with ellipsis or visible in few lines
    */
    'headersDisplay'?: HeadersDisplay;
    /**
    * Table height (px, auto)
    */
    'height'?: string;
    /**
    * Define header menu icon
    */
    'icons': TableIcons[];
    /**
    * Define is table pagination is visible
    */
    'pagination'?: boolean;
    /**
    * Define number of rows to display with pagination option
    */
    'paginationPageSize'?: number;
    /**
    * Define if columns are resizable
    */
    'resizable'?: boolean;
    /**
    * Define row height
    */
    'rowHeight'?: number;
    'setColumnDataFilter': (filteredResult: MultiselectDropdownResult) => Promise<void>;
    'setExpanded': (nodeKey: any) => Promise<void>;
    'setNumberRangeDataFilter': (filteredResult: AmountFilterOutput) => Promise<void>;
    /**
    * Define if columns width should be auto resize after load, to fit table width. This option will ignore width declaration in columns definition and prevent table horizontal scroll. Can not work with autoSizeColumnsFlag
    */
    'sizeColumnsToFitFlag'?: boolean;
    /**
    * Define if table data are sortable
    */
    'sortable'?: boolean;
    /**
    * Define if status bar should be visible
    */
    'statusBar'?: boolean;
    /**
    * Define type of data that are shown on status bar
    */
    'statusPanel'?: StatusBarType;
    /**
    * Define alignment of status bar
    */
    'statusPanelAlign'?: Alignment;
    /**
    * Define basic table style
    */
    'styleType'?: StyleType;
    /**
    * Table width (px, percent)
    */
    'width'?: string;
  }
  interface WfTabs {
    /**
    * Decides which tab is selected initially
    */
    'selected': string;
    /**
    * Controls the visual 'type' of tabs
    */
    'type': TabsType;
  }
  interface WfTag {
    /**
    * Tag text value
    */
    'text': string;
    /**
    * Type of tag
    */
    'type': TagType;
  }
  interface WfTextarea {
    /**
    * DEPRECATED Content of left caption
    */
    'caption': string;
    /**
    * Cols of textarea
    */
    'cols': number;
    /**
    * Content of description / contextual info
    */
    'description': string;
    /**
    * Decides if textarea is disabled
    */
    'disabled': boolean;
    /**
    * Decides if textarea has an error
    */
    'error': boolean;
    /**
    * Error messages
    */
    'errorMessage': FormErrorMessage;
    /**
    * Decides if label has inline position
    */
    'inlineLabel': boolean;
    /**
    * Content of top label
    */
    'label': string;
    /**
    * Decides if textarea in locked state
    */
    'locked': boolean;
    /**
    * Maximum length of textarea field
    */
    'maxlength': number;
    /**
    * Textarea text placeholder
    */
    'placeholder': string;
    /**
    * Decides if textarea field required
    */
    'required': boolean;
    /**
    * Rows of textarea
    */
    'rows': number;
    /**
    * Textarea select method
    */
    'selectText': () => Promise<void>;
    /**
    * To focus textarea element use setFocus method
    */
    'setFocus': () => Promise<void>;
    /**
    * DEPRECATED Size of textarea
    */
    'size': TextareaSize;
    /**
    * ID of an underlying textarea element
    */
    'textareaId': string;
    'updateInput': (value: string) => Promise<void>;
    /**
    * Value of textarea
    */
    'value': string;
    /**
    * Variant of textarea
    */
    'variant': TextareaVariant;
  }
  interface WfTooltip {
    /**
    * Whether it should be moved directly to the body
    */
    'detached': boolean;
    /**
    * The title of the tooltip
    */
    'header': string;
    /**
    * Controls the 'visible' state of the tooltip
    */
    'opened': boolean;
    /**
    * Placement of tooltip, if not defined it will be auto-calculated
    */
    'placement': TooltipPlacement;
    /**
    * The text of the tooltip
    */
    'text': string;
    /**
    * Tooltip visibility period
    */
    'timeout': number;
    /**
    * Trigger event
    */
    'trigger': TooltipEvent;
    /**
    * Type of tooltip
    */
    'type': TooltipType;
    /**
    * Controls the 'width' of drawer dialog. Can be standard (default), slim or wide
    */
    'width': TooltipWidth;
  }
}

declare global {


  interface HTMLWfAccordionElement extends Components.WfAccordion, HTMLStencilElement {}
  var HTMLWfAccordionElement: {
    prototype: HTMLWfAccordionElement;
    new (): HTMLWfAccordionElement;
  };

  interface HTMLWfActionIconElement extends Components.WfActionIcon, HTMLStencilElement {}
  var HTMLWfActionIconElement: {
    prototype: HTMLWfActionIconElement;
    new (): HTMLWfActionIconElement;
  };

  interface HTMLWfActionMenuElement extends Components.WfActionMenu, HTMLStencilElement {}
  var HTMLWfActionMenuElement: {
    prototype: HTMLWfActionMenuElement;
    new (): HTMLWfActionMenuElement;
  };

  interface HTMLWfAmountFilterElement extends Components.WfAmountFilter, HTMLStencilElement {}
  var HTMLWfAmountFilterElement: {
    prototype: HTMLWfAmountFilterElement;
    new (): HTMLWfAmountFilterElement;
  };

  interface HTMLWfButtonElement extends Components.WfButton, HTMLStencilElement {}
  var HTMLWfButtonElement: {
    prototype: HTMLWfButtonElement;
    new (): HTMLWfButtonElement;
  };

  interface HTMLWfCalendarPickerElement extends Components.WfCalendarPicker, HTMLStencilElement {}
  var HTMLWfCalendarPickerElement: {
    prototype: HTMLWfCalendarPickerElement;
    new (): HTMLWfCalendarPickerElement;
  };

  interface HTMLWfCardElement extends Components.WfCard, HTMLStencilElement {}
  var HTMLWfCardElement: {
    prototype: HTMLWfCardElement;
    new (): HTMLWfCardElement;
  };

  interface HTMLWfCardBodyElement extends Components.WfCardBody, HTMLStencilElement {}
  var HTMLWfCardBodyElement: {
    prototype: HTMLWfCardBodyElement;
    new (): HTMLWfCardBodyElement;
  };

  interface HTMLWfCardFooterElement extends Components.WfCardFooter, HTMLStencilElement {}
  var HTMLWfCardFooterElement: {
    prototype: HTMLWfCardFooterElement;
    new (): HTMLWfCardFooterElement;
  };

  interface HTMLWfCardHeaderElement extends Components.WfCardHeader, HTMLStencilElement {}
  var HTMLWfCardHeaderElement: {
    prototype: HTMLWfCardHeaderElement;
    new (): HTMLWfCardHeaderElement;
  };

  interface HTMLWfCardHeaderActionsElement extends Components.WfCardHeaderActions, HTMLStencilElement {}
  var HTMLWfCardHeaderActionsElement: {
    prototype: HTMLWfCardHeaderActionsElement;
    new (): HTMLWfCardHeaderActionsElement;
  };

  interface HTMLWfCardTitleElement extends Components.WfCardTitle, HTMLStencilElement {}
  var HTMLWfCardTitleElement: {
    prototype: HTMLWfCardTitleElement;
    new (): HTMLWfCardTitleElement;
  };

  interface HTMLWfCheckboxElement extends Components.WfCheckbox, HTMLStencilElement {}
  var HTMLWfCheckboxElement: {
    prototype: HTMLWfCheckboxElement;
    new (): HTMLWfCheckboxElement;
  };

  interface HTMLWfChipElement extends Components.WfChip, HTMLStencilElement {}
  var HTMLWfChipElement: {
    prototype: HTMLWfChipElement;
    new (): HTMLWfChipElement;
  };

  interface HTMLWfChipListElement extends Components.WfChipList, HTMLStencilElement {}
  var HTMLWfChipListElement: {
    prototype: HTMLWfChipListElement;
    new (): HTMLWfChipListElement;
  };

  interface HTMLWfColumnsCustomizerElement extends Components.WfColumnsCustomizer, HTMLStencilElement {}
  var HTMLWfColumnsCustomizerElement: {
    prototype: HTMLWfColumnsCustomizerElement;
    new (): HTMLWfColumnsCustomizerElement;
  };

  interface HTMLWfDrawerElement extends Components.WfDrawer, HTMLStencilElement {}
  var HTMLWfDrawerElement: {
    prototype: HTMLWfDrawerElement;
    new (): HTMLWfDrawerElement;
  };

  interface HTMLWfDropdownElement extends Components.WfDropdown, HTMLStencilElement {}
  var HTMLWfDropdownElement: {
    prototype: HTMLWfDropdownElement;
    new (): HTMLWfDropdownElement;
  };

  interface HTMLWfExpansionPanelElement extends Components.WfExpansionPanel, HTMLStencilElement {}
  var HTMLWfExpansionPanelElement: {
    prototype: HTMLWfExpansionPanelElement;
    new (): HTMLWfExpansionPanelElement;
  };

  interface HTMLWfFlyoutElement extends Components.WfFlyout, HTMLStencilElement {}
  var HTMLWfFlyoutElement: {
    prototype: HTMLWfFlyoutElement;
    new (): HTMLWfFlyoutElement;
  };

  interface HTMLWfIconElement extends Components.WfIcon, HTMLStencilElement {}
  var HTMLWfIconElement: {
    prototype: HTMLWfIconElement;
    new (): HTMLWfIconElement;
  };

  interface HTMLWfInputElement extends Components.WfInput, HTMLStencilElement {}
  var HTMLWfInputElement: {
    prototype: HTMLWfInputElement;
    new (): HTMLWfInputElement;
  };

  interface HTMLWfModalElement extends Components.WfModal, HTMLStencilElement {}
  var HTMLWfModalElement: {
    prototype: HTMLWfModalElement;
    new (): HTMLWfModalElement;
  };

  interface HTMLWfMultiselectDropdownElement extends Components.WfMultiselectDropdown, HTMLStencilElement {}
  var HTMLWfMultiselectDropdownElement: {
    prototype: HTMLWfMultiselectDropdownElement;
    new (): HTMLWfMultiselectDropdownElement;
  };

  interface HTMLWfProcessNavigationElement extends Components.WfProcessNavigation, HTMLStencilElement {}
  var HTMLWfProcessNavigationElement: {
    prototype: HTMLWfProcessNavigationElement;
    new (): HTMLWfProcessNavigationElement;
  };

  interface HTMLWfRadioElement extends Components.WfRadio, HTMLStencilElement {}
  var HTMLWfRadioElement: {
    prototype: HTMLWfRadioElement;
    new (): HTMLWfRadioElement;
  };

  interface HTMLWfRadioOptionElement extends Components.WfRadioOption, HTMLStencilElement {}
  var HTMLWfRadioOptionElement: {
    prototype: HTMLWfRadioOptionElement;
    new (): HTMLWfRadioOptionElement;
  };

  interface HTMLWfReorderElement extends Components.WfReorder, HTMLStencilElement {}
  var HTMLWfReorderElement: {
    prototype: HTMLWfReorderElement;
    new (): HTMLWfReorderElement;
  };

  interface HTMLWfScrollbarElement extends Components.WfScrollbar, HTMLStencilElement {}
  var HTMLWfScrollbarElement: {
    prototype: HTMLWfScrollbarElement;
    new (): HTMLWfScrollbarElement;
  };

  interface HTMLWfSelectElement extends Components.WfSelect, HTMLStencilElement {}
  var HTMLWfSelectElement: {
    prototype: HTMLWfSelectElement;
    new (): HTMLWfSelectElement;
  };

  interface HTMLWfSelectOptionElement extends Components.WfSelectOption, HTMLStencilElement {}
  var HTMLWfSelectOptionElement: {
    prototype: HTMLWfSelectOptionElement;
    new (): HTMLWfSelectOptionElement;
  };

  interface HTMLWfSpinnerElement extends Components.WfSpinner, HTMLStencilElement {}
  var HTMLWfSpinnerElement: {
    prototype: HTMLWfSpinnerElement;
    new (): HTMLWfSpinnerElement;
  };

  interface HTMLWfSpyElement extends Components.WfSpy, HTMLStencilElement {}
  var HTMLWfSpyElement: {
    prototype: HTMLWfSpyElement;
    new (): HTMLWfSpyElement;
  };

  interface HTMLWfStepperInputElement extends Components.WfStepperInput, HTMLStencilElement {}
  var HTMLWfStepperInputElement: {
    prototype: HTMLWfStepperInputElement;
    new (): HTMLWfStepperInputElement;
  };

  interface HTMLWfSwitchElement extends Components.WfSwitch, HTMLStencilElement {}
  var HTMLWfSwitchElement: {
    prototype: HTMLWfSwitchElement;
    new (): HTMLWfSwitchElement;
  };

  interface HTMLWfTabButtonElement extends Components.WfTabButton, HTMLStencilElement {}
  var HTMLWfTabButtonElement: {
    prototype: HTMLWfTabButtonElement;
    new (): HTMLWfTabButtonElement;
  };

  interface HTMLWfTableElement extends Components.WfTable, HTMLStencilElement {}
  var HTMLWfTableElement: {
    prototype: HTMLWfTableElement;
    new (): HTMLWfTableElement;
  };

  interface HTMLWfTabsElement extends Components.WfTabs, HTMLStencilElement {}
  var HTMLWfTabsElement: {
    prototype: HTMLWfTabsElement;
    new (): HTMLWfTabsElement;
  };

  interface HTMLWfTagElement extends Components.WfTag, HTMLStencilElement {}
  var HTMLWfTagElement: {
    prototype: HTMLWfTagElement;
    new (): HTMLWfTagElement;
  };

  interface HTMLWfTextareaElement extends Components.WfTextarea, HTMLStencilElement {}
  var HTMLWfTextareaElement: {
    prototype: HTMLWfTextareaElement;
    new (): HTMLWfTextareaElement;
  };

  interface HTMLWfTooltipElement extends Components.WfTooltip, HTMLStencilElement {}
  var HTMLWfTooltipElement: {
    prototype: HTMLWfTooltipElement;
    new (): HTMLWfTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'wf-accordion': HTMLWfAccordionElement;
    'wf-action-icon': HTMLWfActionIconElement;
    'wf-action-menu': HTMLWfActionMenuElement;
    'wf-amount-filter': HTMLWfAmountFilterElement;
    'wf-button': HTMLWfButtonElement;
    'wf-calendar-picker': HTMLWfCalendarPickerElement;
    'wf-card': HTMLWfCardElement;
    'wf-card-body': HTMLWfCardBodyElement;
    'wf-card-footer': HTMLWfCardFooterElement;
    'wf-card-header': HTMLWfCardHeaderElement;
    'wf-card-header-actions': HTMLWfCardHeaderActionsElement;
    'wf-card-title': HTMLWfCardTitleElement;
    'wf-checkbox': HTMLWfCheckboxElement;
    'wf-chip': HTMLWfChipElement;
    'wf-chip-list': HTMLWfChipListElement;
    'wf-columns-customizer': HTMLWfColumnsCustomizerElement;
    'wf-drawer': HTMLWfDrawerElement;
    'wf-dropdown': HTMLWfDropdownElement;
    'wf-expansion-panel': HTMLWfExpansionPanelElement;
    'wf-flyout': HTMLWfFlyoutElement;
    'wf-icon': HTMLWfIconElement;
    'wf-input': HTMLWfInputElement;
    'wf-modal': HTMLWfModalElement;
    'wf-multiselect-dropdown': HTMLWfMultiselectDropdownElement;
    'wf-process-navigation': HTMLWfProcessNavigationElement;
    'wf-radio': HTMLWfRadioElement;
    'wf-radio-option': HTMLWfRadioOptionElement;
    'wf-reorder': HTMLWfReorderElement;
    'wf-scrollbar': HTMLWfScrollbarElement;
    'wf-select': HTMLWfSelectElement;
    'wf-select-option': HTMLWfSelectOptionElement;
    'wf-spinner': HTMLWfSpinnerElement;
    'wf-spy': HTMLWfSpyElement;
    'wf-stepper-input': HTMLWfStepperInputElement;
    'wf-switch': HTMLWfSwitchElement;
    'wf-tab-button': HTMLWfTabButtonElement;
    'wf-table': HTMLWfTableElement;
    'wf-tabs': HTMLWfTabsElement;
    'wf-tag': HTMLWfTagElement;
    'wf-textarea': HTMLWfTextareaElement;
    'wf-tooltip': HTMLWfTooltipElement;
  }
}

declare namespace LocalJSX {
  interface WfAccordion {}
  interface WfActionIcon {
    /**
    * Defines if icon has bounding circle
    */
    'bounding'?: boolean;
    /**
    * The name of the icon
    */
    'name'?: string;
    /**
    * Click event
    */
    'onClick'?: (event: CustomEvent<any>) => void;
    /**
    * Click event
    */
    'onWfClick'?: (event: CustomEvent<any>) => void;
    /**
    * Defines if icon has property open
    */
    'open'?: boolean;
    /**
    * Decide if icon can change the size
    */
    'scalable'?: boolean;
    /**
    * The size of the icon
    */
    'size'?: ActionIconSize;
    /**
    * The variant of the icon
    */
    'variant'?: ActionIconVariant;
  }
  interface WfActionMenu {
    /**
    * Child menu trigger event
    */
    'childTrigger'?: FlyoutEvent;
    /**
    * Label of extra items button
    */
    'extraItemsLabel'?: string;
    /**
    * Strucutre of menu items
    */
    'items'?: GroupItemDTO[] | string;
    /**
    * Limit of items to show in primary dropdown
    */
    'itemsLimit'?: number;
    /**
    * Configure the arrow pointer for the child level menu flyout
    */
    'noArrow'?: boolean;
    /**
    * Select event
    */
    'onSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Select event
    */
    'onWfSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Define if action menu is opened or closed
    */
    'opened'?: boolean;
    /**
    * Configure child level flyout menu overlap
    */
    'overlap'?: number;
    /**
    * Placement of action menu, if not defined it will be auto-calculated
    */
    'placement'?: FlyoutPlacement;
    /**
    * Placement of sub menus, if not defined it will be auto-calculated
    */
    'subPlacement'?: 'left' | 'right';
    /**
    * Trigger event
    */
    'trigger'?: FlyoutEvent;
  }
  interface WfAmountFilter {
    /**
    * Size of action buttons
    */
    'buttonSize'?: ButtonSize;
    /**
    * Decides if amount filter is disabled
    */
    'disabled'?: boolean;
    /**
    * Sets filter component error state
    */
    'error'?: boolean;
    /**
    * Error message for empty input value (inner input)
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Filtered column key name. Used as ID of filtered column
    */
    'field'?: string;
    /**
    * Inner value input label
    */
    'innerLabel'?: string;
    /**
    * DEPRECATED! Size of filter input field
    */
    'inputSize'?: InputSize;
    /**
    * Type of internal input
    */
    'inputType'?: InputType;
    /**
    * Filter label
    */
    'label'?: string;
    /**
    * Component error state message
    */
    'mainErrorMessage'?: FormErrorMessage;
    /**
    * Mask options
    */
    'maskOptions'?: MaskOptions;
    /**
    * Value type returned from masked type input
    */
    'maskValue'?: MaskValue;
    /**
    * Amount filter change event
    */
    'onChange'?: (event: CustomEvent<AmountFilterOutput>) => void;
    /**
    * Amount filter change event
    */
    'onWfChange'?: (event: CustomEvent<AmountFilterOutput>) => void;
    /**
    * Input text placeholder
    */
    'placeholder'?: string;
    /**
    * Internal input prefix
    */
    'prefixLabel'?: string;
    /**
    * Decides if amount filter required
    */
    'required'?: boolean;
    /**
    * Current selected tab
    */
    'selectedTab'?: AmountFilterRange;
    /**
    * Size of component trigger
    */
    'size'?: InputSize;
    /**
    * Input value alignment
    */
    'textAlign'?: InputTextAlign;
    /**
    * Inner input current value
    */
    'value'?: number | string;
    /**
    * Variant of filter wf-input
    */
    'variant'?: InputVariant;
  }
  interface WfButton {
    /**
    * Use to set button state as active
    */
    'active'?: boolean;
    /**
    * Use to set button state as disabled
    */
    'disabled'?: boolean;
    /**
    * Icon name to display on button
    */
    'icon'?: string;
    /**
    * Define if icon should be shown before or after text
    */
    'iconPlacement'?: IconPlacement;
    /**
    * Icon size
    */
    'iconSize'?: IconSize;
    /**
    * DEPRECATED! Icon type
    */
    'iconType'?: IconType;
    'onBlur'?: (event: CustomEvent<void>) => void;
    'onClick'?: (event: CustomEvent<any>) => void;
    'onFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Input blur event
    */
    'onWfBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Input focus event
    */
    'onWfFocus'?: (event: CustomEvent<void>) => void;
    /**
    * DEPRECATED! Size of button
    */
    'size'?: ButtonSize;
    /**
    * Type of button
    */
    'type'?: ButtonType;
    /**
    * Variant of button. DEPRECATED! 'link', 'success', 'warning', 'info', 'danger'
    */
    'variant'?: ButtonVariant;
  }
  interface WfCalendarPicker {
    /**
    * DEPRECATED! Size of action buttons
    */
    'buttonSize'?: ButtonSize;
    /**
    * Initial calendar date
    */
    'date'?: string[] | string;
    /**
    * Default preset
    */
    'defaultPreset'?: PresetNameType;
    /**
    * Decides if calendar picker is disabled
    */
    'disabled'?: boolean;
    /**
    * Sets filter component error state
    */
    'error'?: boolean;
    /**
    * Define array of hided preset
    */
    'excludedPreset'?: any[];
    /**
    * Define the date format
    */
    'format'?: string;
    /**
    * Define blackout days
    */
    'holidays'?: (string | string[])[];
    /**
    * Input icon
    */
    'icon'?: string;
    /**
    * Input icon size
    */
    'iconSize'?: IconSize;
    /**
    * DEPRECATED! Size of filter input fields
    */
    'inputSize'?: InputSize;
    /**
    * Content of input top label
    */
    'label'?: string;
    /**
    * Component error state message
    */
    'mainErrorMessage'?: FormErrorMessage;
    /**
    * Define the max date available for selection
    */
    'maxDate'?: string | Date;
    /**
    * Define the min date available for selection
    */
    'minDate'?: string | Date;
    /**
    * Date picker change event, contains the picked date or array of two dates in case of range picker
    */
    'onChange'?: (event: CustomEvent<string | string[]>) => void;
    /**
    * Date picker change event, contains the picked date or array of two dates in case of range picker
    */
    'onWfChange'?: (event: CustomEvent<string | string[]>) => void;
    /**
    * Input text placeholder
    */
    'placeholder'?: string;
    /**
    * Enable range picking
    */
    'range'?: boolean;
    /**
    * Decides if calendar field required
    */
    'required'?: boolean;
    /**
    * Decides if disabled data should be shown
    */
    'showDisable'?: boolean;
    /**
    * Define if the left panel with preset is visible
    */
    'showPreset'?: boolean;
    /**
    * DEPRECATED! Size of component trigger
    */
    'size'?: InputSize;
    /**
    * Type of weekend to block in calendar
    */
    'weekend'?: CalendarWeekend;
  }
  interface WfCard {}
  interface WfCardBody {}
  interface WfCardFooter {}
  interface WfCardHeader {}
  interface WfCardHeaderActions {}
  interface WfCardTitle {}
  interface WfCheckbox {
    /**
    * Checkbox ID
    */
    'checkboxId'?: string;
    /**
    * Decides if checkbox is checked
    */
    'checked'?: boolean;
    /**
    * Decides if checkbox is disabled
    */
    'disabled'?: boolean;
    /**
    * Decides if checkbox has an error
    */
    'error'?: boolean;
    /**
    * Error messages
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Decides if checkbox is indeterminate mode
    */
    'indeterminate'?: boolean;
    /**
    * Content of label
    */
    'label'?: string;
    /**
    * Checkbox name
    */
    'name'?: string;
    'onBlur'?: (event: CustomEvent<void>) => void;
    'onChange'?: (event: CustomEvent<boolean | CheckboxOutput>) => void;
    'onFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Checkbox blur event
    */
    'onWfBlur'?: (event: CustomEvent<void>) => void;
    'onWfChange'?: (event: CustomEvent<boolean | CheckboxOutput>) => void;
    /**
    * Checkbox focus event
    */
    'onWfFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Decides if checkbox field required
    */
    'required'?: boolean;
    /**
    * Size of checkbox
    */
    'size'?: CheckboxSize;
    /**
    * Value of checkbox
    */
    'value'?: string;
  }
  interface WfChip {
    'onChipClick'?: (event: CustomEvent<any>) => void;
    'onChipRemove'?: (event: CustomEvent<any>) => void;
    'onWfChipClick'?: (event: CustomEvent<any>) => void;
    'onWfChipRemove'?: (event: CustomEvent<any>) => void;
  }
  interface WfChipList {}
  interface WfColumnsCustomizer {
    /**
    * Size of action buttons
    */
    'buttonSize'?: ButtonSize;
    /**
    * Columns definition object. Should be created from wf-table columns definition.
    */
    'defaultColumns'?: TableColumns[] | string;
    /**
    * Header text
    */
    'header'?: string;
    /**
    * Dragging icon name
    */
    'icon'?: string;
    /**
    * Dragging icon size
    */
    'iconSize'?: IconSize;
    /**
    * Limit of search/jump to list items
    */
    'maxSearchItems'?: number;
    'onChange'?: (event: CustomEvent<TableColumns[]>) => void;
    'onClose'?: (event: CustomEvent<void>) => void;
    'onWfChange'?: (event: CustomEvent<TableColumns[]>) => void;
    'onWfClose'?: (event: CustomEvent<void>) => void;
    /**
    * Define if customizer drawer is opened
    */
    'opened'?: boolean;
    /**
    * Search/jump to input icon name
    */
    'searchInputIcon'?: string;
    /**
    * Search/jump to input icon size
    */
    'searchInputIconSize'?: IconSize;
    /**
    * Search/jump to input label
    */
    'searchInputLabel'?: string;
    /**
    * Search/jump to input placeholder
    */
    'searchInputPlaceholder'?: string;
    /**
    * Search/jump to input size
    */
    'searchInputSize'?: InputSize;
  }
  interface WfDrawer {
    /**
    * Animation duration
    */
    'animationDuration'?: number;
    /**
    * Control back button
    */
    'backButton'?: boolean;
    /**
    * Back action icon name
    */
    'backIcon'?: string;
    /**
    * Closing action icon name
    */
    'closeIcon'?: string;
    /**
    * Simple drawer title
    */
    'header'?: string;
    /**
    * Backdrop drawer
    */
    'hideBackdrop'?: boolean;
    /**
    * The size of the close and back icon
    */
    'iconSize'?: ActionIconSize;
    'onBack'?: (event: CustomEvent<any>) => void;
    'onClose'?: (event: CustomEvent<any>) => void;
    'onWfBack'?: (event: CustomEvent<any>) => void;
    'onWfClose'?: (event: CustomEvent<any>) => void;
    /**
    * Controls the 'opened' state of the drawer
    */
    'opened'?: boolean;
    /**
    * Position of drawer
    */
    'position'?: DrawerPosition;
    /**
    * Preset drawer
    */
    'preset'?: string;
    /**
    * Control should drawer squeeze page
    */
    'squeezePage'?: boolean;
    /**
    * Min witdth of page where squeeze is available
    */
    'thresholdBreakpoint'?: number;
    /**
    * Controls the 'width' of drawer dialog. Can be standard (default), slim or wide
    */
    'width'?: DrawerWidth;
  }
  interface WfDropdown {
    /**
    * Define should we adjust height *
    */
    'adjustHeight'?: boolean;
    /**
    * Define if dropdown aling with parent *
    */
    'alignWithParent'?: boolean;
    /**
    * Define if dropdown available to open *
    */
    'disabled'?: boolean;
    /**
    * Toggle event
    */
    'onToggle'?: (event: CustomEvent<boolean>) => void;
    /**
    * Toggle event
    */
    'onWfToggle'?: (event: CustomEvent<boolean>) => void;
    'opened'?: boolean;
    /**
    * Define for special case parent selector *
    */
    'parentSelector'?: string;
    /**
    * Define if closing on scroll active *
    */
    'scrollSensitive'?: boolean;
  }
  interface WfExpansionPanel {
    /**
    * State of panel
    */
    'expanded'?: boolean;
    /**
    * Collapse event
    */
    'onExpand'?: (event: CustomEvent<ExpansionPanelEventData>) => void;
    /**
    * Collapse event
    */
    'onWfExpand'?: (event: CustomEvent<ExpansionPanelEventData>) => void;
    /**
    * Unique Id of panel
    */
    'panelId'?: string;
    /**
    * Show title on open style
    */
    'pinnedTitle'?: boolean;
  }
  interface WfFlyout {
    /**
    * DEPRECATED! Define if flyout should have visual pointer to trigger element
    */
    'arrowPointer'?: boolean;
    /**
    * Whether it should be moved directly to the body
    */
    'detached'?: boolean;
    'enableOpenChangedEvent'?: boolean;
    /**
    * Focusable element attribute. Should be added to design component that content should be focusable.
    */
    'focusAttribute'?: string;
    /**
    * Current depth level
    */
    'level'?: number;
    /**
    * Define if flyout should have visual pointer to trigger element
    */
    'noArrow'?: boolean;
    'onClose'?: (event: CustomEvent<FlyoutCloseEvent>) => void;
    'onOpen'?: (event: CustomEvent<FlyoutOpenEvent>) => void;
    'onWfClose'?: (event: CustomEvent<FlyoutCloseEvent>) => void;
    'onWfOpen'?: (event: CustomEvent<FlyoutOpenEvent>) => void;
    /**
    * Define if flyout content is open or close
    */
    'opened'?: boolean;
    /**
    * Configure child level flyout menu overlap
    */
    'overlap'?: number;
    /**
    * Placement of flyout, if not defined it will be auto-calculated
    */
    'placement'?: FlyoutPlacement;
    /**
    * Trigger event
    */
    'trigger'?: FlyoutEvent;
    /**
    * Tab index assigned to the trigger element
    */
    'triggerTabIndex'?: string;
  }
  interface WfIcon {
    /**
    * The name of the icon
    */
    'name'?: string;
    /**
    * Decide if icon can change the size
    */
    'scalable'?: boolean;
    /**
    * The size of the icon
    */
    'size'?: IconSize;
    /**
    * DEPRECATED! The type of the icon
    */
    'type'?: IconType;
  }
  interface WfInput {
    /**
    * DEPRECATED Content of caption
    */
    'caption'?: string;
    /**
    * Content of description / contextual info
    */
    'description'?: string;
    /**
    * Decides if input is disabled
    */
    'disabled'?: boolean;
    /**
    * Decides if input has an error
    */
    'error'?: boolean;
    /**
    * Error messages
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Input icon
    */
    'icon'?: string;
    /**
    * Input icon size
    */
    'iconSize'?: IconSize;
    /**
    * Decides if label has inline position
    */
    'inlineLabel'?: boolean;
    /**
    * ID of an underlying input element
    */
    'inputId'?: string;
    /**
    * Content of top label
    */
    'label'?: string;
    /**
    * Decides if input in locked state
    */
    'locked'?: boolean;
    /**
    * Input locked icon
    */
    'lockedIcon'?: string;
    /**
    * Input locked icon size
    */
    'lockedIconSize'?: IconSize;
    /**
    * Mask options
    */
    'maskOptions'?: MaskOptions;
    /**
    * Value type returned from masked type input
    */
    'maskValue'?: MaskValue;
    /**
    * Maximum length of input field
    */
    'maxlength'?: number;
    'onBlur'?: (event: CustomEvent<void>) => void;
    'onChange'?: (event: CustomEvent<string>) => void;
    'onClick'?: (event: CustomEvent<void>) => void;
    'onFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Input icon click event
    */
    'onIconClick'?: (event: CustomEvent<void>) => void;
    'onInput'?: (event: CustomEvent<string>) => void;
    /**
    * Input blur event
    */
    'onWfBlur'?: (event: CustomEvent<void>) => void;
    'onWfChange'?: (event: CustomEvent<string>) => void;
    /**
    * Input click event
    */
    'onWfClick'?: (event: CustomEvent<void>) => void;
    /**
    * Input focus event
    */
    'onWfFocus'?: (event: CustomEvent<void>) => void;
    'onWfInput'?: (event: CustomEvent<string>) => void;
    /**
    * Input text placeholder
    */
    'placeholder'?: string;
    /**
    * Input prefix
    */
    'prefixLabel'?: string;
    /**
    * Decides if input is in readonly mode
    */
    'readonly'?: boolean;
    /**
    * Decides if input field required
    */
    'required'?: boolean;
    /**
    * DEPRECATED Size of input
    */
    'size'?: InputSize;
    /**
    * Input value alignment
    */
    'textAlign'?: InputTextAlign;
    /**
    * Type of input
    */
    'type'?: InputType;
    /**
    * Value of input
    */
    'value'?: string;
    /**
    * Variant of input
    */
    'variant'?: InputVariant;
  }
  interface WfModal {
    /**
    * Size of action buttons
    */
    'buttonSize'?: ButtonSize;
    /**
    * Header text
    */
    'header'?: string;
    /**
    * Emitted when modal is closed by the user
    */
    'onClose'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when modal is closed by the user
    */
    'onWfClose'?: (event: CustomEvent<any>) => void;
    /**
    * Controls the 'opened' state of the modal
    */
    'opened'?: boolean;
  }
  interface WfMultiselectDropdown {
    /**
    * DEPRECATED! Size of action buttons
    */
    'buttonSize'?: ButtonSize;
    /**
    * Size of items checkboxs
    */
    'checkboxSize'?: CheckboxSize;
    /**
    * Decides if multiselect dropdown is disabled
    */
    'disabled'?: boolean;
    /**
    * Sets filter component error state
    */
    'error'?: boolean;
    /**
    * Component error state message
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Filtered column key name. Used as ID of filtered column
    */
    'field'?: string;
    /**
    * Multiselect dropdown label
    */
    'label'?: string;
    /**
    * Change event
    */
    'onChange'?: (event: CustomEvent<MultiselectDropdownResult>) => void;
    /**
    * Change event
    */
    'onWfChange'?: (event: CustomEvent<MultiselectDropdownResult>) => void;
    /**
    * Multiselect dropdown options. Type string is DEPRECATED!
    */
    'options'?: MultiselectDropdownOption[] | string;
    /**
    * Limit of visible selected options
    */
    'optionsVisibilityLimit'?: number | string;
    /**
    * Input text placeholder
    */
    'placeholder'?: string;
    /**
    * Decides if multiselect required
    */
    'required'?: boolean;
    /**
    * DEPRECATED! Size of component trigger
    */
    'size'?: InputSize;
    /**
    * Property gives current value or sets new from options value.
    */
    'value'?: string[];
    /**
    * Variant of filter wf-input
    */
    'variant'?: InputVariant;
  }
  interface WfProcessNavigation {
    /**
    * Emmitted when one of the steps is clicked on freeflow process
    */
    'onClick'?: (event: CustomEvent<ProcessNavigationStep>) => void;
    /**
    * Emmitted when one of the steps is clicked on freeflow process
    */
    'onWfClick'?: (event: CustomEvent<ProcessNavigationStep>) => void;
    /**
    * Array of process steps
    */
    'steps'?: ProcessNavigationStep[] | string;
    /**
    * Navigation type, freeflow allows step clicking
    */
    'type'?: ProcessNavigationType;
  }
  interface WfRadio {
    /**
    * Decides if radio group is disabled
    */
    'disabled'?: boolean;
    /**
    * Decides if radio group has an error
    */
    'error'?: boolean;
    /**
    * Error messages
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Decides if radio group align horizontally
    */
    'inline'?: boolean;
    /**
    * Content of top label
    */
    'label'?: string;
    /**
    * Radio buttons group name
    */
    'name'?: string;
    'onBlur'?: (event: CustomEvent<any>) => void;
    'onChange'?: (event: CustomEvent<any>) => void;
    'onFocus'?: (event: CustomEvent<any>) => void;
    /**
    * Radio button blur event
    */
    'onWfBlur'?: (event: CustomEvent<void>) => void;
    'onWfChange'?: (event: CustomEvent<any>) => void;
    /**
    * Radio button focus event
    */
    'onWfFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Radio options
    */
    'options'?: RadioOption<any>[];
    /**
    * Decides if radio field required
    */
    'required'?: boolean;
    /**
    * Size of radio
    */
    'size'?: RadioSize;
    /**
    * Currently selected value
    */
    'value'?: any;
  }
  interface WfRadioOption {
    /**
    * Decides if option is initially selected
    */
    'checked'?: boolean;
    /**
    * Decides if option is disabled
    */
    'disabled'?: boolean;
    /**
    * Option label
    */
    'label'?: string;
    /**
    * Option ID
    */
    'optionId'?: string;
    /**
    * Option value
    */
    'value'?: any;
  }
  interface WfReorder {
    /**
    * Table columns definition array
    */
    'columns'?: TableColumns[] | string;
    /**
    * Array of data
    */
    'data'?: any[] | string;
    /**
    * Dragging icon name
    */
    'icon'?: string;
    /**
    * Dragging icon size
    */
    'iconSize'?: IconSize;
    /**
    * Event fired on the drop
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * Event fired on the drop
    */
    'onWfChange'?: (event: CustomEvent<any>) => void;
  }
  interface WfScrollbar {
    /**
    * Define attribute name that will be added to scroll parent.
    */
    'parentAttr'?: string;
    /**
    * Define static height of scrolling content. If set, content height won't be recalculated.
    */
    'staticHeight'?: string;
    /**
    * Define scrollbar type.
    */
    'type'?: ScrollType;
  }
  interface WfSelect {
    /**
    * DEPRECATED! Content of left caption
    */
    'caption'?: string;
    /**
    * Custom row for option element
    */
    'customRow'?: (option: SelectOption<any>) => string;
    /**
    * Content of description / contextual info
    */
    'description'?: string;
    /**
    * Decides if select is disabled
    */
    'disabled'?: boolean;
    /**
    * Decides if select has an error
    */
    'error'?: boolean;
    /**
    * Error messages
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Icon name
    */
    'icon'?: string;
    /**
    * Icon size
    */
    'iconSize'?: IconSize;
    /**
    * Decides if label has inline position
    */
    'inlineLabel'?: boolean;
    /**
    * Content of top label
    */
    'label'?: string;
    /**
    * Decides if filtering available
    */
    'liveSearch'?: boolean;
    /**
    * Decides if select is in locked state
    */
    'locked'?: boolean;
    /**
    * Change event
    */
    'onChange'?: (event: CustomEvent<any>) => void;
    /**
    * Change event
    */
    'onWfChange'?: (event: CustomEvent<any>) => void;
    /**
    * Select options. Type string is DEPRECATED!
    */
    'options'?: SelectOption<any>[] | string;
    /**
    * Placeholder describes the expected value
    */
    'placeholder'?: string;
    /**
    * Prefix label content
    */
    'prefixLabel'?: string;
    /**
    * Decides if select field required
    */
    'required'?: boolean;
    /**
    * DEPRECATED! Search Icon Name
    */
    'searchIcon'?: string;
    /**
    * Select ID
    */
    'selectId'?: string;
    /**
    * Type of component user as select list trigger (TEMPORARY! Will be changed to 'type')
    */
    'selectType'?: SelectType;
    /**
    * DEPRECATED! Size of select
    */
    'size'?: SelectSize;
    /**
    * DEPRECATED! Type of select
    */
    'type'?: SelectVariant;
    /**
    * Property gives current value or sets new from options value.
    */
    'value'?: any;
    /**
    * Variant of select trigger (SelectVariant or ButtonVariant, based on selectType)
    */
    'variant'?: SelectVariant | ButtonVariant;
  }
  interface WfSelectOption {
    /**
    * Decides if option is disabled
    */
    'disabled'?: boolean;
    /**
    * Option name
    */
    'name'?: string;
    /**
    * Decides if option is selected
    */
    'selected'?: boolean;
    /**
    * Option display name when it is selected
    */
    'selectedName'?: string;
    /**
    * Option value
    */
    'value'?: any;
  }
  interface WfSpinner {
    /**
    * Delay time (in ms) after which spinner will show
    */
    'delay'?: number;
    /**
    * Amount of time (in ms) that spinner will wait until shows timeoutErrorMsg. Set to 0 to disable.
    */
    'errorTimeout'?: number;
    /**
    * Define if spinner is visible
    */
    'opened'?: boolean;
    /**
    * Message to show error when time expired
    */
    'timeoutErrorMsg'?: string;
    /**
    * Message to show warning with long loading time
    */
    'timeoutWarningMsg'?: string;
    /**
    * Amount of time (in ms) that spinner will wait until shows timeoutWarningMsg. Set to 0 to disable.
    */
    'warningTimeout'?: number;
  }
  interface WfSpy {
    /**
    * HTML element to track
    */
    'target'?: HTMLElement;
  }
  interface WfStepperInput {
    'arrowDownIcon'?: string;
    'arrowIconSize'?: ActionIconSize;
    'arrowUpIcon'?: string;
    /**
    * DEPRECATED Content of caption
    */
    'caption'?: string;
    /**
    * Content of description / contextual info
    */
    'description'?: string;
    /**
    * Decides if stepper is disabled
    */
    'disabled'?: boolean;
    /**
    * Decides if stepper has an error
    */
    'error'?: boolean;
    /**
    * Error messages
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * DEPRECATED! Accumulator function to get Value from object option
    */
    'getValue'?: Function;
    /**
    * Decides if label has inline position
    */
    'inlineLabel'?: boolean;
    /**
    * Id of input stepper
    */
    'inputId'?: string;
    /**
    * Content of top label
    */
    'label'?: string;
    /**
    * Decides if stepper is in locked state
    */
    'locked'?: boolean;
    /**
    * Input locked icon
    */
    'lockedIcon'?: string;
    /**
    * Input locked icon size
    */
    'lockedIconSize'?: IconSize;
    /**
    * DEPRECATED! Decides if stepper input numeric
    */
    'numeric'?: boolean;
    /**
    * Stepper change event
    */
    'onStepperChange'?: (event: CustomEvent<string | number>) => void;
    /**
    * Stepper change event
    */
    'onWfStepperChange'?: (event: CustomEvent<string | number>) => void;
    /**
    * Stepper options. DEPRECATED! Option types StepperOption[] | string
    */
    'options'?: string[] | StepperOption[] | string;
    /**
    * DEPRECATED Size of stepper
    */
    'size'?: InputSize;
    /**
    * Input value alignment
    */
    'textAlign'?: InputTextAlign;
    /**
    * Initial numeric input value or gives/sets value from options value.
    */
    'value'?: string | number;
    /**
    * Variant of stepper
    */
    'variant'?: InputVariant;
  }
  interface WfSwitch {
    /**
    * Define if switch checked
    */
    'checked'?: boolean;
    /**
    * Disabled Switch
    */
    'disabled'?: boolean;
    /**
    * Error Switch
    */
    'error'?: boolean;
    /**
    * Define icon
    */
    'icon'?: string;
    /**
    * Define if icon should be shown before or after text
    */
    'iconPlacement'?: IconPlacement;
    /**
    * Define icon size
    */
    'iconSize'?: IconSize;
    /**
    * DEPRECATED! Define icon
    */
    'iconname'?: any;
    /**
    * DEPRECATED! Define icon size
    */
    'iconsize'?: IconSize;
    /**
    * Define switch label
    */
    'label'?: string;
    /**
    * Define switch off name
    */
    'off'?: string;
    /**
    * Define switch on name
    */
    'on'?: string;
    /**
    * Switch change event
    */
    'onChange'?: (event: CustomEvent<boolean>) => void;
    /**
    * Switch change event
    */
    'onWfChange'?: (event: CustomEvent<boolean>) => void;
    /**
    * On/Off labels placement
    */
    'placement'?: SwitchPlacement;
    /**
    * Readonly Switch
    */
    'readonly'?: boolean;
    /**
    * On/Off labels placement
    */
    'size'?: SwitchSize;
  }
  interface WfTabButton {
    /**
    * Controls the 'disabled' state of the button
    */
    'disabled'?: boolean;
    /**
    * Tab button click event
    */
    'onTabButtonClicked'?: (event: CustomEvent<string>) => void;
    /**
    * Tab button click event
    */
    'onWfTabButtonClicked'?: (event: CustomEvent<string>) => void;
    /**
    * Decides which tab is selected initially, do not set this property directly since it's propagated from `wf-tabs`
    */
    'selected'?: boolean;
    /**
    * This prop needs to be reflected due to a weird behavior of Stencil in Stencil components
    */
    'tab'?: string;
    /**
    * Controls the visual 'type' of tabs, do not set this property directly since it's propagated from `wf-tabs`
    */
    'type'?: TabsType;
  }
  interface WfTable {
    /**
    * Define if data actions (such as sorting) should be animated
    */
    'animateRows'?: boolean;
    /**
    * Define if columns width should be auto resize after load, to fit cells content. This option will ignore width declaration in columns definition. Can not work with sizeColumnsToFitFlag.
    */
    'autoSizeColumnsFlag'?: boolean;
    /**
    * Table columns definition array
    */
    'columns'?: TableColumns[] | string;
    /**
    * Define custom configuration of the table
    */
    'configuration'?: GridOptions | string;
    /**
    * Client side data
    */
    'data'?: RowDataType;
    /**
    * Server side data datasource object
    */
    'datasource'?: IServerSideDatasource | string;
    /**
    * Define table layout
    */
    'domLayout'?: GridLayoutType;
    /**
    * Define if cells range selection is enabled
    */
    'enableRangeSelection'?: boolean;
    /**
    * Define if groups should be expanded on load
    */
    'expanded'?: boolean;
    /**
    * Define if data filter is enable
    */
    'filter'?: boolean;
    /**
    * Define header row height
    */
    'headerHeight'?: number;
    /**
    * Define column headers text overflow. Can be displayed with ellipsis or visible in few lines
    */
    'headersDisplay'?: HeadersDisplay;
    /**
    * Table height (px, auto)
    */
    'height'?: string;
    /**
    * Define header menu icon
    */
    'icons'?: TableIcons[];
    /**
    * Table cell clicked
    */
    'onCellClick'?: (event: CustomEvent<CellClickedEvent>) => void;
    /**
    * Table column moved
    */
    'onColumnMoved'?: (event: CustomEvent<ColumnMovedEvent>) => void;
    /**
    * Table filter changed
    */
    'onFilterChanged'?: (event: CustomEvent<FilterChangedEvent>) => void;
    /**
    * Table pagination change
    */
    'onPaginationChanged'?: (event: CustomEvent<PaginationChangedEvent>) => void;
    /**
    * Table range selection changed
    */
    'onRangeSelectionChanged'?: (event: CustomEvent<CustomRangeSelectionChangedEvent>) => void;
    /**
    * Table row clicked
    */
    'onRowClicked'?: (event: CustomEvent<RowClickedEvent>) => void;
    /**
    * Table row selected
    */
    'onRowSelect'?: (event: CustomEvent<RowSelectedEvent>) => void;
    /**
    * Table selection changed
    */
    'onSelectionChanged'?: (event: CustomEvent<SelectionChangedEvent>) => void;
    /**
    * Table sort changed
    */
    'onSortChanged'?: (event: CustomEvent<SortChangedEvent>) => void;
    'onWfCellClick'?: (event: CustomEvent<CellClickedEvent>) => void;
    'onWfColumnMoved'?: (event: CustomEvent<ColumnMovedEvent>) => void;
    'onWfFilterChanged'?: (event: CustomEvent<FilterChangedEvent>) => void;
    'onWfPaginationChanged'?: (event: CustomEvent<PaginationChangedEvent>) => void;
    'onWfRangeSelectionChanged'?: (event: CustomEvent<CustomRangeSelectionChangedEvent>) => void;
    'onWfRowClicked'?: (event: CustomEvent<RowClickedEvent>) => void;
    'onWfRowSelect'?: (event: CustomEvent<RowSelectedEvent>) => void;
    'onWfSelectionChanged'?: (event: CustomEvent<SelectionChangedEvent>) => void;
    'onWfSortChanged'?: (event: CustomEvent<SortChangedEvent>) => void;
    /**
    * Define is table pagination is visible
    */
    'pagination'?: boolean;
    /**
    * Define number of rows to display with pagination option
    */
    'paginationPageSize'?: number;
    /**
    * Define if columns are resizable
    */
    'resizable'?: boolean;
    /**
    * Define row height
    */
    'rowHeight'?: number;
    /**
    * Define if columns width should be auto resize after load, to fit table width. This option will ignore width declaration in columns definition and prevent table horizontal scroll. Can not work with autoSizeColumnsFlag
    */
    'sizeColumnsToFitFlag'?: boolean;
    /**
    * Define if table data are sortable
    */
    'sortable'?: boolean;
    /**
    * Define if status bar should be visible
    */
    'statusBar'?: boolean;
    /**
    * Define type of data that are shown on status bar
    */
    'statusPanel'?: StatusBarType;
    /**
    * Define alignment of status bar
    */
    'statusPanelAlign'?: Alignment;
    /**
    * Define basic table style
    */
    'styleType'?: StyleType;
    /**
    * Table width (px, percent)
    */
    'width'?: string;
  }
  interface WfTabs {
    /**
    * Emmitted when one of the tabs is selected by user interaction
    */
    'onTabSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Emmitted when one of the tabs is selected by user interaction
    */
    'onWfTabSelect'?: (event: CustomEvent<any>) => void;
    /**
    * Decides which tab is selected initially
    */
    'selected'?: string;
    /**
    * Controls the visual 'type' of tabs
    */
    'type'?: TabsType;
  }
  interface WfTag {
    /**
    * Tag text value
    */
    'text'?: string;
    /**
    * Type of tag
    */
    'type'?: TagType;
  }
  interface WfTextarea {
    /**
    * DEPRECATED Content of left caption
    */
    'caption'?: string;
    /**
    * Cols of textarea
    */
    'cols'?: number;
    /**
    * Content of description / contextual info
    */
    'description'?: string;
    /**
    * Decides if textarea is disabled
    */
    'disabled'?: boolean;
    /**
    * Decides if textarea has an error
    */
    'error'?: boolean;
    /**
    * Error messages
    */
    'errorMessage'?: FormErrorMessage;
    /**
    * Decides if label has inline position
    */
    'inlineLabel'?: boolean;
    /**
    * Content of top label
    */
    'label'?: string;
    /**
    * Decides if textarea in locked state
    */
    'locked'?: boolean;
    /**
    * Maximum length of textarea field
    */
    'maxlength'?: number;
    'onBlur'?: (event: CustomEvent<void>) => void;
    'onChange'?: (event: CustomEvent<string>) => void;
    'onFocus'?: (event: CustomEvent<void>) => void;
    'onInput'?: (event: CustomEvent<string>) => void;
    /**
    * Textarea blur event
    */
    'onWfBlur'?: (event: CustomEvent<void>) => void;
    'onWfChange'?: (event: CustomEvent<string>) => void;
    /**
    * Textarea focus event
    */
    'onWfFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Textarea input event
    */
    'onWfInput'?: (event: CustomEvent<string>) => void;
    /**
    * Textarea text placeholder
    */
    'placeholder'?: string;
    /**
    * Decides if textarea field required
    */
    'required'?: boolean;
    /**
    * Rows of textarea
    */
    'rows'?: number;
    /**
    * DEPRECATED Size of textarea
    */
    'size'?: TextareaSize;
    /**
    * ID of an underlying textarea element
    */
    'textareaId'?: string;
    /**
    * Value of textarea
    */
    'value'?: string;
    /**
    * Variant of textarea
    */
    'variant'?: TextareaVariant;
  }
  interface WfTooltip {
    /**
    * Whether it should be moved directly to the body
    */
    'detached'?: boolean;
    /**
    * The title of the tooltip
    */
    'header'?: string;
    /**
    * Emitted when tooltip is closed
    */
    'onClose'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when tooltip is closed
    */
    'onWfClose'?: (event: CustomEvent<any>) => void;
    /**
    * Controls the 'visible' state of the tooltip
    */
    'opened'?: boolean;
    /**
    * Placement of tooltip, if not defined it will be auto-calculated
    */
    'placement'?: TooltipPlacement;
    /**
    * The text of the tooltip
    */
    'text'?: string;
    /**
    * Tooltip visibility period
    */
    'timeout'?: number;
    /**
    * Trigger event
    */
    'trigger'?: TooltipEvent;
    /**
    * Type of tooltip
    */
    'type'?: TooltipType;
    /**
    * Controls the 'width' of drawer dialog. Can be standard (default), slim or wide
    */
    'width'?: TooltipWidth;
  }

  interface IntrinsicElements {
    'wf-accordion': WfAccordion;
    'wf-action-icon': WfActionIcon;
    'wf-action-menu': WfActionMenu;
    'wf-amount-filter': WfAmountFilter;
    'wf-button': WfButton;
    'wf-calendar-picker': WfCalendarPicker;
    'wf-card': WfCard;
    'wf-card-body': WfCardBody;
    'wf-card-footer': WfCardFooter;
    'wf-card-header': WfCardHeader;
    'wf-card-header-actions': WfCardHeaderActions;
    'wf-card-title': WfCardTitle;
    'wf-checkbox': WfCheckbox;
    'wf-chip': WfChip;
    'wf-chip-list': WfChipList;
    'wf-columns-customizer': WfColumnsCustomizer;
    'wf-drawer': WfDrawer;
    'wf-dropdown': WfDropdown;
    'wf-expansion-panel': WfExpansionPanel;
    'wf-flyout': WfFlyout;
    'wf-icon': WfIcon;
    'wf-input': WfInput;
    'wf-modal': WfModal;
    'wf-multiselect-dropdown': WfMultiselectDropdown;
    'wf-process-navigation': WfProcessNavigation;
    'wf-radio': WfRadio;
    'wf-radio-option': WfRadioOption;
    'wf-reorder': WfReorder;
    'wf-scrollbar': WfScrollbar;
    'wf-select': WfSelect;
    'wf-select-option': WfSelectOption;
    'wf-spinner': WfSpinner;
    'wf-spy': WfSpy;
    'wf-stepper-input': WfStepperInput;
    'wf-switch': WfSwitch;
    'wf-tab-button': WfTabButton;
    'wf-table': WfTable;
    'wf-tabs': WfTabs;
    'wf-tag': WfTag;
    'wf-textarea': WfTextarea;
    'wf-tooltip': WfTooltip;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'wf-accordion': LocalJSX.WfAccordion & JSXBase.HTMLAttributes<HTMLWfAccordionElement>;
      'wf-action-icon': LocalJSX.WfActionIcon & JSXBase.HTMLAttributes<HTMLWfActionIconElement>;
      'wf-action-menu': LocalJSX.WfActionMenu & JSXBase.HTMLAttributes<HTMLWfActionMenuElement>;
      'wf-amount-filter': LocalJSX.WfAmountFilter & JSXBase.HTMLAttributes<HTMLWfAmountFilterElement>;
      'wf-button': LocalJSX.WfButton & JSXBase.HTMLAttributes<HTMLWfButtonElement>;
      'wf-calendar-picker': LocalJSX.WfCalendarPicker & JSXBase.HTMLAttributes<HTMLWfCalendarPickerElement>;
      'wf-card': LocalJSX.WfCard & JSXBase.HTMLAttributes<HTMLWfCardElement>;
      'wf-card-body': LocalJSX.WfCardBody & JSXBase.HTMLAttributes<HTMLWfCardBodyElement>;
      'wf-card-footer': LocalJSX.WfCardFooter & JSXBase.HTMLAttributes<HTMLWfCardFooterElement>;
      'wf-card-header': LocalJSX.WfCardHeader & JSXBase.HTMLAttributes<HTMLWfCardHeaderElement>;
      'wf-card-header-actions': LocalJSX.WfCardHeaderActions & JSXBase.HTMLAttributes<HTMLWfCardHeaderActionsElement>;
      'wf-card-title': LocalJSX.WfCardTitle & JSXBase.HTMLAttributes<HTMLWfCardTitleElement>;
      'wf-checkbox': LocalJSX.WfCheckbox & JSXBase.HTMLAttributes<HTMLWfCheckboxElement>;
      'wf-chip': LocalJSX.WfChip & JSXBase.HTMLAttributes<HTMLWfChipElement>;
      'wf-chip-list': LocalJSX.WfChipList & JSXBase.HTMLAttributes<HTMLWfChipListElement>;
      'wf-columns-customizer': LocalJSX.WfColumnsCustomizer & JSXBase.HTMLAttributes<HTMLWfColumnsCustomizerElement>;
      'wf-drawer': LocalJSX.WfDrawer & JSXBase.HTMLAttributes<HTMLWfDrawerElement>;
      'wf-dropdown': LocalJSX.WfDropdown & JSXBase.HTMLAttributes<HTMLWfDropdownElement>;
      'wf-expansion-panel': LocalJSX.WfExpansionPanel & JSXBase.HTMLAttributes<HTMLWfExpansionPanelElement>;
      'wf-flyout': LocalJSX.WfFlyout & JSXBase.HTMLAttributes<HTMLWfFlyoutElement>;
      'wf-icon': LocalJSX.WfIcon & JSXBase.HTMLAttributes<HTMLWfIconElement>;
      'wf-input': LocalJSX.WfInput & JSXBase.HTMLAttributes<HTMLWfInputElement>;
      'wf-modal': LocalJSX.WfModal & JSXBase.HTMLAttributes<HTMLWfModalElement>;
      'wf-multiselect-dropdown': LocalJSX.WfMultiselectDropdown & JSXBase.HTMLAttributes<HTMLWfMultiselectDropdownElement>;
      'wf-process-navigation': LocalJSX.WfProcessNavigation & JSXBase.HTMLAttributes<HTMLWfProcessNavigationElement>;
      'wf-radio': LocalJSX.WfRadio & JSXBase.HTMLAttributes<HTMLWfRadioElement>;
      'wf-radio-option': LocalJSX.WfRadioOption & JSXBase.HTMLAttributes<HTMLWfRadioOptionElement>;
      'wf-reorder': LocalJSX.WfReorder & JSXBase.HTMLAttributes<HTMLWfReorderElement>;
      'wf-scrollbar': LocalJSX.WfScrollbar & JSXBase.HTMLAttributes<HTMLWfScrollbarElement>;
      'wf-select': LocalJSX.WfSelect & JSXBase.HTMLAttributes<HTMLWfSelectElement>;
      'wf-select-option': LocalJSX.WfSelectOption & JSXBase.HTMLAttributes<HTMLWfSelectOptionElement>;
      'wf-spinner': LocalJSX.WfSpinner & JSXBase.HTMLAttributes<HTMLWfSpinnerElement>;
      'wf-spy': LocalJSX.WfSpy & JSXBase.HTMLAttributes<HTMLWfSpyElement>;
      'wf-stepper-input': LocalJSX.WfStepperInput & JSXBase.HTMLAttributes<HTMLWfStepperInputElement>;
      'wf-switch': LocalJSX.WfSwitch & JSXBase.HTMLAttributes<HTMLWfSwitchElement>;
      'wf-tab-button': LocalJSX.WfTabButton & JSXBase.HTMLAttributes<HTMLWfTabButtonElement>;
      'wf-table': LocalJSX.WfTable & JSXBase.HTMLAttributes<HTMLWfTableElement>;
      'wf-tabs': LocalJSX.WfTabs & JSXBase.HTMLAttributes<HTMLWfTabsElement>;
      'wf-tag': LocalJSX.WfTag & JSXBase.HTMLAttributes<HTMLWfTagElement>;
      'wf-textarea': LocalJSX.WfTextarea & JSXBase.HTMLAttributes<HTMLWfTextareaElement>;
      'wf-tooltip': LocalJSX.WfTooltip & JSXBase.HTMLAttributes<HTMLWfTooltipElement>;
    }
  }
}


